package com.example.taskmanager.service;

import com.example.taskmanager.model.Event;
import com.example.taskmanager.model.Notification;
import com.example.taskmanager.repository.EventRepository;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
public class NotificationService {

    private final EventRepository eventRepository;

    public NotificationService(EventRepository eventRepository) {
        this.eventRepository = eventRepository;
    }

    public List<Notification> getPendingNotifications(Long userId) {
        List<Event> userEvents = eventRepository.findByUserId(userId);
        List<Notification> notifications = new ArrayList<>();
        LocalDateTime now = LocalDateTime.now();

        for (Event event : userEvents) {
            // üîî –ó–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è
            if (isFiveMinutesBefore(event, now)) {
                notifications.add(createNotification(event, "FIVE_MINUTES_BEFORE",
                        "üîî –°–∫–æ—Ä–æ —Å–æ–±—ã—Ç–∏–µ",
                        event.getTitle() + " –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"));
            }

            // ‚è∞ –í –º–æ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è (¬±1 –º–∏–Ω—É—Ç–∞)
            if (isEventStartingNow(event, now)) {
                notifications.add(createNotification(event, "EVENT_STARTED",
                        "‚è∞ –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!",
                        event.getTitle() + " –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å"));
            }

            // ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (10+ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
            if (isEventExpired(event, now)) {
                notifications.add(createNotification(event, "EVENT_EXPIRED",
                        "‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ",
                        event.getTitle() + " –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –Ω–∞—á–∞—Ç—å—Å—è " + formatDateTime(event.getEventTime())));
            }
        }

        return notifications;
    }

    private boolean isFiveMinutesBefore(Event event, LocalDateTime now) {
        LocalDateTime fiveMinutesBefore = event.getEventTime().minusMinutes(5);
        LocalDateTime eventTime = event.getEventTime();
        return now.isAfter(fiveMinutesBefore) && now.isBefore(eventTime);
    }

    private boolean isEventStartingNow(Event event, LocalDateTime now) {
        LocalDateTime oneMinuteBefore = event.getEventTime().minusMinutes(1);
        LocalDateTime oneMinuteAfter = event.getEventTime().plusMinutes(1);
        return now.isAfter(oneMinuteBefore) && now.isBefore(oneMinuteAfter);
    }

    private boolean isEventExpired(Event event, LocalDateTime now) {
        LocalDateTime tenMinutesAfter = event.getEventTime().plusMinutes(10);
        return now.isAfter(tenMinutesAfter) && now.isBefore(event.getEventTime().plusDays(1));
    }

    private Notification createNotification(Event event, String type, String title, String message) {
        Notification notification = new Notification();
        notification.setEventId(event.getId());
        notification.setType(type);
        notification.setTitle(title);
        notification.setMessage(message);
        notification.setEventTime(event.getEventTime());
        return notification;
    }

    private String formatDateTime(LocalDateTime dateTime) {
        return dateTime.toString(); // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
}